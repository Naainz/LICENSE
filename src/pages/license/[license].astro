---
import Layout from '../../layouts/Layout.astro';
import fs from 'fs';
import path from 'path';

const licenseName = Astro.params.license;
const licensesDir = path.resolve('./src/db');
const licenses = fs.readdirSync(licensesDir).filter(file => file.endsWith('.txt')).map(file => {
  const content = fs.readFileSync(path.join(licensesDir, file), 'utf-8');
  const [metadataSection] = content.split('---').filter(section => section.trim() !== '');
  const metadataLines = metadataSection.trim().split('\n');
  const metadata = {};
  metadataLines.forEach(line => {
    const [key, value] = line.split(':').map(s => s.trim());
    if (key && value) {
      metadata[key] = value;
    }
  });
  metadata.file = file;
  return metadata;
});

const license = licenses.find(license => license.file.includes(licenseName));
const licenseContent = fs.readFileSync(path.join(licensesDir, license.file), 'utf-8');

const parseLicenseContent = (content) => {
  const sections = content.split('---').filter(section => section.trim() !== '');
  const metadataSection = sections[0].trim();
  const body = sections[1].trim();

  const lines = metadataSection.split('\n');
  const metadata = {};
  for (const line of lines) {
    if (line.startsWith('title:')) {
      metadata.title = line.replace('title: ', '').trim();
    } else if (line.startsWith('description:')) {
      metadata.description = line.replace('description: ', '').trim();
    } else if (line.startsWith('permissions:')) {
      metadata.permissions = parseList(lines, lines.indexOf(line));
    } else if (line.startsWith('conditions:')) {
      metadata.conditions = parseList(lines, lines.indexOf(line));
    } else if (line.startsWith('limitations:')) {
      metadata.limitations = parseList(lines, lines.indexOf(line));
    }
  }
  return { metadata, body };
}

const parseList = (lines, startIndex) => {
  const list = [];
  for (let i = startIndex + 1; i < lines.length; i++) {
    const line = lines[i].trim();
    if (line.startsWith('- ')) {
      list.push(line.replace('- ', '').trim());
    } else {
      break;
    }
  }
  return list;
}

const { metadata, body } = parseLicenseContent(licenseContent);
---

<Layout>
  <div class="container mx-auto px-4 py-8">
    <header class="text-center mb-8">
      <h1 class="text-4xl font-bold mb-2">{metadata.title}</h1>
      <p class="text-lg">{metadata.description}</p>
    </header>
    <div class="relative max-w-xl mx-auto">
      <div id="license-content" class="mt-8">
        <div class="flex flex-col lg:flex-row lg:justify-between lg:space-x-4">
          <div class="lg:w-1/2 bg-gray-100 dark:bg-gray-900 p-4 rounded border border-gray-300 dark:border-gray-700 overflow-auto max-h-80">
            <pre class="whitespace-pre-wrap"><code>{body}</code></pre>
          </div>
          <div class="lg:w-1/2 mt-4 lg:mt-0">
            <h2 class="text-2xl font-bold mb-2">License Details</h2>
            <div id="license-details" class="grid grid-cols-1 lg:grid-cols-3 gap-4">
              <div>
                <h3 class="font-semibold">Permissions</h3>
                <ul id="permissions-list" class="list-disc list-inside">
                  {metadata.permissions.length > 0 ? metadata.permissions.map(permission => (
                    <li>{permission}</li>
                  )) : <li>None</li>}
                </ul>
              </div>
              <div>
                <h3 class="font-semibold">Limitations</h3>
                <ul id="limitations-list" class="list-disc list-inside">
                  {metadata.limitations.length > 0 ? metadata.limitations.map(limit => (
                    <li>{limit}</li>
                  )) : <li>None</li>}
                </ul>
              </div>
              <div>
                <h3 class="font-semibold">Conditions</h3>
                <ul id="conditions-list" class="list-disc list-inside">
                  {metadata.conditions.length > 0 ? metadata.conditions.map(condition => (
                    <li>{condition}</li>
                  )) : <li>None</li>}
                </ul>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>
</Layout>
