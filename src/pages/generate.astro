---
import Layout from '../layouts/Layout.astro';
import fs from 'fs';
import path from 'path';

const licensesDir = path.resolve('./src/db');
const licenses = fs.readdirSync(licensesDir).filter(file => file.endsWith('.txt')).map(file => {
  const content = fs.readFileSync(path.join(licensesDir, file), 'utf-8');
  const [metadataSection, bodySection] = content.split('---').filter(section => section.trim() !== '');
  const metadataLines = metadataSection.trim().split('\n');
  const metadata = {};
  metadataLines.forEach(line => {
    const [key, value] = line.split(':').map(s => s.trim());
    if (key && value) {
      if (key === 'permissions' || key === 'conditions' || key === 'limitations') {
        metadata[key] = value.split(',').map(item => item.trim());
      } else {
        metadata[key] = value;
      }
    }
  });
  metadata.body = bodySection.trim();
  metadata.file = file;
  return metadata;
});

const permissions = [
  "commercial-use", "modifications", "distribution", "private-use", "patent-use"
];

const limitations = [
  "liability", "trademark-use", "warranty"
];

const conditions = [
  "include-copyright", "disclose-source", "document-changes", "network-use-disclose", "same-license"
];
---

<Layout>
  <div class="p-4">
    <h1 class="text-3xl font-bold mb-4">License Generator</h1>
    <div id="content">
      <p class="mb-6">Select the permissions, conditions, and limitations you want in your license and click "Generate License".</p>
      
      <h2 class="text-2xl font-bold mb-2">Permissions</h2>
      <div id="permissionsForm" class="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-4 mb-6">
        {permissions.map(permission => (
          <button type="button" id={permission} class="toggle-btn bg-gray-200 text-gray-900 py-2 px-4 rounded border border-gray-300 hover:bg-gray-300 transition-colors duration-300">
            {permission}
          </button>
        ))}
      </div>
      
      <h2 class="text-2xl font-bold mb-2">Limitations</h2>
      <div id="limitationsForm" class="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-4 mb-6">
        {limitations.map(limitation => (
          <button type="button" id={limitation} class="toggle-btn bg-gray-200 text-gray-900 py-2 px-4 rounded border border-gray-300 hover:bg-gray-300 transition-colors duration-300">
            {limitation}
          </button>
        ))}
      </div>

      <h2 class="text-2xl font-bold mb-2">Conditions</h2>
      <div id="conditionsForm" class="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-4 mb-6">
        {conditions.map(condition => (
          <button type="button" id={condition} class="toggle-btn bg-gray-200 text-gray-900 py-2 px-4 rounded border border-gray-300 hover:bg-gray-300 transition-colors duration-300">
            {condition}
          </button>
        ))}
      </div>
      
      <button type="button" class="bg-blue-500 text-white py-2 px-4 rounded hover:bg-blue-600 focus:outline-none" id="generate-button">Generate License</button>
    </div>
    <div id="loading" class="hidden text-center mt-8">
      <i class="fas fa-spinner fa-spin text-4xl text-blue-500"></i>
      <p class="mt-4 text-xl" id="loading-text"></p>
    </div>
    <div id="license-selection" class="hidden mt-8">
      <div class="relative max-w-xl mx-auto">
        <div class="relative">
          <button 
            id="dropdown-toggle" 
            class="w-full px-4 py-2 mb-2 border rounded bg-white dark:bg-gray-800 focus:outline-none focus:ring-2 focus:ring-indigo-500 flex justify-between items-center"
          >
            <span>Select a license</span>
            <i class="fas fa-chevron-down"></i>
          </button>
          <div id="dropdown" class="hidden absolute w-full mt-1 bg-white dark:bg-gray-800 border rounded shadow-lg z-10">
            <input 
              type="text" 
              id="search-input"
              placeholder="Search for a license..." 
              class="w-full px-4 py-2 border-b focus:outline-none"
            />
            <ul id="license-list" class="max-h-60 overflow-y-auto"></ul>
          </div>
        </div>
      </div>
    </div>
    <div id="license-content" class="hidden mt-8">
      <div class="flex flex-col lg:flex-row lg:justify-between lg:space-x-4">
        <div class="lg:w-1/2 bg-gray-100 dark:bg-gray-900 p-4 rounded border border-gray-300 dark:border-gray-700 overflow-auto max-h-80">
          <pre class="whitespace-pre-wrap"><code id="license-text"></code></pre>
        </div>
        <div class="lg:w-1/2 mt-4 lg:mt-0">
          <h2 id="license-title" class="text-2xl font-bold mb-2"></h2>
          <p id="license-description" class="mb-4"></p>
          <div id="license-details" class="grid grid-cols-1 lg:grid-cols-3 gap-4">
            <div>
              <h3 class="font-semibold">Permissions</h3>
              <ul id="permissions-list" class="list-disc list-inside"></ul>
            </div>
            <div>
              <h3 class="font-semibold">Limitations</h3>
              <ul id="limitations-list" class="list-disc list-inside"></ul>
            </div>
            <div>
              <h3 class="font-semibold">Conditions</h3>
              <ul id="conditions-list" class="list-disc list-inside"></ul>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>

  <script>
    document.addEventListener('DOMContentLoaded', function() {
      const licenses = [
        {licenses.map(license => `{
          title: "${license.title}",
          description: "${license.description}",
          permissions: ${JSON.stringify(license.permissions)},
          limitations: ${JSON.stringify(license.limitations)},
          conditions: ${JSON.stringify(license.conditions)},
          file: "${license.file}"
        }`).join(',')}
      ];

      const toggleButtons = document.querySelectorAll('.toggle-btn');
      toggleButtons.forEach(button => {
        button.addEventListener('click', function() {
          button.classList.toggle('bg-orange-500');
          button.classList.toggle('text-white');
          button.classList.toggle('border-orange-500');
          button.classList.toggle('bg-gray-200');
          button.classList.toggle('text-gray-900');
          button.classList.toggle('border-gray-300');
        });
      });

      document.getElementById('generate-button').addEventListener('click', generateLicense);
      document.getElementById('dropdown-toggle').addEventListener('click', toggleDropdown);
      document.getElementById('search-input').addEventListener('input', filterLicenses);

      window.selectLicense = selectLicense;  // Make selectLicense available globally

      async function generateLicense() {
        const selectedPermissions = Array.from(document.querySelectorAll('#permissionsForm .toggle-btn.bg-orange-500')).map(el => el.id);
        const selectedLimitations = Array.from(document.querySelectorAll('#limitationsForm .toggle-btn.bg-orange-500')).map(el => el.id);
        const selectedConditions = Array.from(document.querySelectorAll('#conditionsForm .toggle-btn.bg-orange-500')).map(el => el.id);
        
        document.getElementById('content').classList.add('fade-out');
        setTimeout(() => {
          document.getElementById('content').classList.add('hidden');
          const loading = document.getElementById('loading');
          loading.classList.remove('hidden');
          loading.classList.add('fade-in');

          document.getElementById('loading-text').innerText = `Get ready! You selected: 
          Permissions: ${selectedPermissions.join(', ') || 'None'}
          Limitations: ${selectedLimitations.join(', ') || 'None'}
          Conditions: ${selectedConditions.join(', ') || 'None'}`;

          // Filter licenses that match the selected criteria
          const matchedLicenses = licenses.filter(license => {
            const matchPermissions = selectedPermissions.every(permission => license.permissions.includes(permission));
            const matchLimitations = selectedLimitations.every(limitation => license.limitations.includes(limitation));
            const matchConditions = selectedConditions.every(condition => license.conditions.includes(condition));
            return matchPermissions && matchLimitations && matchConditions;
          });

          const licenseList = document.getElementById('license-list');
          licenseList.innerHTML = '';
          matchedLicenses.forEach(license => {
            const li = document.createElement('li');
            li.className = 'px-4 py-2 hover:bg-gray-200 dark:hover:bg-gray-700 cursor-pointer';
            li.textContent = license.title;
            li.setAttribute('data-file', license.file);
            li.onclick = () => selectLicense(license.file);
            licenseList.appendChild(li);
          });

          document.getElementById('loading').classList.add('hidden');
          document.getElementById('license-selection').classList.remove('hidden');
          document.getElementById('license-selection').classList.add('fade-in');
        }, 500);
      }

      function toggleDropdown() {
        const dropdown = document.getElementById('dropdown');
        dropdown.classList.toggle('hidden');
      }

      function filterLicenses(event) {
        const filter = event.target.value.toLowerCase();
        const ul = document.getElementById("license-list");
        const li = ul.getElementsByTagName("li");
        for (let i = 0; i < li.length; i++) {
          const text = li[i].textContent || li[i].innerText;
          li[i].style.display = text.toLowerCase().indexOf(filter) > -1 ? "" : "none";
        }
      }

      async function selectLicense(file) {
        // Collapse the dropdown
        toggleDropdown();

        // Fetch the license content
        const response = await fetch(`/src/db/${file}`);
        const content = await response.text();

        // Parse the license metadata and body
        const { metadata, body } = parseLicenseContent(content);

        // Update the license text
        document.getElementById('license-text').textContent = body;

        // Update the license metadata
        document.getElementById('license-title').textContent = metadata.title;
        document.getElementById('license-description').textContent = metadata.description;
        updateList('permissions-list', metadata.permissions, 'fa-check');
        updateList('limitations-list', metadata.limitations, 'fa-times');
        updateConditionsList('conditions-list', metadata.conditions);

        // Show the license content section
        document.getElementById('license-content').classList.remove('hidden');
      }

      function parseLicenseContent(content) {
        const sections = content.split('---').filter(section => section.trim() !== '');
        const metadataSection = sections[0].trim();
        const body = sections[1].trim();

        const lines = metadataSection.split('\n');
        const metadata = {};
        for (const line of lines) {
          if (line.startsWith('title:')) {
            metadata.title = line.replace('title: ', '').trim();
          } else if (line.startsWith('description:')) {
            metadata.description = line.replace('description: ', '').trim();
          } else if (line.startsWith('permissions:')) {
            metadata.permissions = parseList(lines, lines.indexOf(line));
          } else if (line.startsWith('conditions:')) {
            metadata.conditions = parseList(lines, lines.indexOf(line));
          } else if (line.startsWith('limitations:')) {
            metadata.limitations = parseList(lines, lines.indexOf(line));
          }
        }
        return { metadata, body };
      }

      function parseList(lines, startIndex) {
        const list = [];
        for (let i = startIndex + 1; i < lines.length; i++) {
          const line = lines[i].trim();
          if (line.startsWith('- ')) {
            list.push(line.replace('- ', '').trim());
          } else {
            break;
          }
        }
        return list;
      }

      function updateList(elementId, items, icon) {
        const listElement = document.getElementById(elementId);
        listElement.innerHTML = '';
        if (items && items.length > 0) {
          items.forEach(item => {
            const li = document.createElement('li');
            li.className = 'flex justify-between items-center';
            li.innerHTML = `${item} <i class="fas ${icon}"></i>`;
            listElement.appendChild(li);
          });
        } else {
          const li = document.createElement('li');
          li.textContent = 'None';
          listElement.appendChild(li);
        }
      }

      function updateConditionsList(elementId, items) {
        const listElement = document.getElementById(elementId);
        listElement.innerHTML = '';
        const icons = {
          'include-copyright': 'fa-copyright',
          'disclose-source': 'fa-code-branch',
          'document-changes': 'fa-file-alt',
          'network-use-disclose': 'fa-wifi',
          'same-license': 'fa-dollar-sign'
        };
        if (items && items.length > 0) {
          items.forEach(item => {
            const li = document.createElement('li');
            li.className = 'flex justify-between items-center';
            const icon = icons[item] || '';
            li.innerHTML = `${item} ${icon ? `<i class="fas ${icon}"></i>` : ''}`;
            listElement.appendChild(li);
          });
        } else {
          const li = document.createElement('li');
          li.textContent = 'None';
          listElement.appendChild(li);
        }
      }
    });
  </script>

  <style>
    .hidden {
      display: none;
    }
    .fade-out {
      opacity: 0;
      transition: opacity 0.5s ease;
    }
    .fade-in {
      opacity: 1;
      transition: opacity 0.5s ease;
    }
  </style>
</Layout>
