---
import Layout from '../layouts/Layout.astro';
import fs from 'fs';
import path from 'path';

const licensesDir = path.resolve('./src/db');
const licenses = fs.readdirSync(licensesDir).filter(file => file.endsWith('.txt')).map(file => {
  const content = fs.readFileSync(path.join(licensesDir, file), 'utf-8');
  const [metadataSection, bodySection] = content.split('---').filter(section => section.trim() !== '');
  const metadataLines = metadataSection.trim().split('\n');
  const metadata = {};
  metadataLines.forEach(line => {
    const [key, value] = line.split(':').map(s => s.trim());
    if (key && value) {
      metadata[key] = value;
    }
  });
  metadata.body = bodySection.trim();
  metadata.file = file;
  return metadata;
});
const licensesJson = JSON.stringify(licenses);
---

<Layout>
  <div class="container mx-auto px-4 py-8">
    <header class="text-center mb-8">
      <h1 class="text-4xl font-bold mb-2">License Information</h1>
    </header>
    <div class="relative max-w-xl mx-auto">
      <div class="relative">
        <input 
          type="text" 
          id="license-input" 
          placeholder="Paste the license text..." 
          class="w-full px-4 py-2 mb-2 border rounded bg-white dark:bg-gray-800 focus:outline-none focus:ring-2 focus:ring-indigo-500"
        />
        <ul id="license-suggestions" class="hidden absolute w-full mt-1 bg-white dark:bg-gray-800 border rounded shadow-lg z-10 max-h-60 overflow-y-auto"></ul>
      </div>
    </div>
    <div id="license-content" class="hidden mt-8">
      <div class="flex flex-col lg:flex-row lg:justify-between lg:space-x-4">
        <div class="lg:w-1/2 mt-4 lg:mt-0">
          <h2 id="license-title" class="text-2xl font-bold mb-2"></h2>
          <p id="license-description" class="mb-4"></p>
          <div id="license-details" class="grid grid-cols-1 lg:grid-cols-3 gap-4">
            <div>
              <h3 class="font-semibold">Permissions</h3>
              <ul id="permissions-list" class="list-disc list-inside"></ul>
            </div>
            <div>
              <h3 class="font-semibold">Limitations</h3>
              <ul id="limitations-list" class="list-disc list-inside"></ul>
            </div>
            <div>
              <h3 class="font-semibold">Conditions</h3>
              <ul id="conditions-list" class="list-disc list-inside"></ul>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>

  <script type="module">
    document.addEventListener("DOMContentLoaded", function() {
      const licenses = JSON.parse(`{{licensesJson}}`);
      const input = document.getElementById('license-input');
      const suggestions = document.getElementById('license-suggestions');

      input.addEventListener('input', function() {
        const query = this.value.toLowerCase().trim().substring(0, 100);
        suggestions.innerHTML = '';
        if (query.length === 0) {
          suggestions.classList.add('hidden');
          return;
        }

        const matches = licenses.filter(license => 
          license.body.toLowerCase().startsWith(query)
        );

        if (matches.length === 0) {
          suggestions.classList.add('hidden');
          return;
        }

        matches.forEach(match => {
          const li = document.createElement('li');
          li.className = 'px-4 py-2 hover:bg-gray-200 dark:hover:bg-gray-700 cursor-pointer';
          li.textContent = match.title;
          li.addEventListener('click', () => selectLicense(match.file));
          suggestions.appendChild(li);
        });

        suggestions.classList.remove('hidden');
      });

      window.selectLicense = selectLicense;

      function selectLicense(file) {
        // Hide the suggestions
        suggestions.classList.add('hidden');

        // Fetch the license content
        fetch(`/src/db/${file}`)
          .then(response => response.text())
          .then(content => {
            // Parse the license metadata and body
            const { metadata, body } = parseLicenseContent(content);

            // Update the license metadata
            document.getElementById('license-title').textContent = metadata.title;
            document.getElementById('license-description').textContent = metadata.description;
            updateList('permissions-list', metadata.permissions, 'fa-check');
            updateList('limitations-list', metadata.limitations, 'fa-times');
            updateConditionsList('conditions-list', metadata.conditions);

            // Show the license content section
            document.getElementById('license-content').classList.remove('hidden');
          });
      }

      function parseLicenseContent(content) {
        const sections = content.split('---').filter(section => section.trim() !== '');
        const metadataSection = sections[0].trim();
        const body = sections[1].trim();

        const lines = metadataSection.split('\n');
        const metadata = {};
        for (const line of lines) {
          if (line.startsWith('title:')) {
            metadata.title = line.replace('title: ', '').trim();
          } else if (line.startsWith('description:')) {
            metadata.description = line.replace('description: ', '').trim();
          } else if (line.startsWith('permissions:')) {
            metadata.permissions = parseList(lines, lines.indexOf(line));
          } else if (line.startsWith('conditions:')) {
            metadata.conditions = parseList(lines, lines.indexOf(line));
          } else if (line.startsWith('limitations:')) {
            metadata.limitations = parseList(lines, lines.indexOf(line));
          }
        }
        return { metadata, body };
      }

      function parseList(lines, startIndex) {
        const list = [];
        for (let i = startIndex + 1; i < lines.length; i++) {
          const line = lines[i].trim();
          if (line.startsWith('- ')) {
            list.push(line.replace('- ', '').trim());
          } else {
            break;
          }
        }
        return list;
      }

      function updateList(elementId, items, icon) {
        const listElement = document.getElementById(elementId);
        listElement.innerHTML = '';
        if (items && items.length > 0) {
          items.forEach(item => {
            const li = document.createElement('li');
            li.className = 'flex justify-between items-center';
            li.innerHTML = `${item} <i class="fas ${icon}"></i>`;
            listElement.appendChild(li);
          });
        } else {
          const li = document.createElement('li');
          li.textContent = 'None';
          listElement.appendChild(li);
        }
      }

      function updateConditionsList(elementId, items) {
        const listElement = document.getElementById(elementId);
        listElement.innerHTML = '';
        const icons = {
          'include-copyright': 'fa-copyright',
          'disclose-source': 'fa-code-branch',
          'document-changes': 'fa-file-alt',
          'network-use-disclose': 'fa-wifi',
          'same-license': 'fa-dollar-sign'
        };
        if (items && items.length > 0) {
          items.forEach(item => {
            const li = document.createElement('li');
            li.className = 'flex justify-between items-center';
            const icon = icons[item] || '';
            li.innerHTML = `${item} ${icon ? `<i class="fas ${icon}"></i>` : ''}`;
            listElement.appendChild(li);
          });
        } else {
          const li = document.createElement('li');
          li.textContent = 'None';
          listElement.appendChild(li);
        }
      }
    });
  </script>
</Layout>
